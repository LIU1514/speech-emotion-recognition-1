{"ast":null,"code":"var _jsxFileName = \"/Users/xmly/PythonProjects/speech-emotion-recognition/emotion-voice/src/components/Voice.js\";\nimport { ReactMic } from 'react-mic';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\nexport class Voice extends React.Component {\n  constructor(props) {\n    super(props);\n\n    this.startRecording = () => {\n      this.setState({\n        record: true,\n        display: false\n      });\n    };\n\n    this.stopRecording = () => {\n      this.setState({\n        record: false,\n        display: true\n      });\n    };\n\n    this.state = {\n      record: false,\n      display: false,\n      data: {\n        labels: ['Angry', 'Sad', 'Passion', 'Fear', 'Neutral'],\n        datasets: [{\n          label: '# of Votes',\n          data: [12, 19, 3, 5, 2],\n          backgroundColor: ['rgba(255, 99, 132, 1)', 'rgba(54, 162, 235, 1)', 'rgba(255, 206, 86, 1)', 'rgba(75, 192, 192, 1)', 'rgba(153, 102, 255, 1)'],\n          borderWidth: 0\n        }]\n      }\n    };\n  }\n\n  postRequest() {\n    axios.post('http://localhost:8000/analyse/', {\n      \"name\": \"frank\"\n    }).then(res => {\n      console.log(res.data);\n    });\n  }\n\n  onData(recordedBlob) {\n    console.log('chunk of real-time data is: ', recordedBlob);\n  }\n\n  onStop(recordedBlob) {\n    const data = new FormData();\n    var blob = new Blob([\"Hello, world!\"], {\n      type: 'text/plain'\n    });\n    var blobUrl = URL.createObjectURL(blob);\n    console.log(blobUrl);\n    blobUrl = data['blobURL'];\n    var xhr = new XMLHttpRequest();\n    xhr.responseType = 'blob';\n\n    xhr.onload = function () {\n      var recoveredBlob = xhr.response;\n      var reader = new FileReader();\n\n      reader.onload = function () {\n        var blobAsDataUrl = reader.result;\n        window.location = blobAsDataUrl;\n      };\n\n      reader.readAsDataURL(recoveredBlob);\n      console.log(reader);\n      axios.post('http://localhost:8000/record/', reader, {\n        headers: {\n          'Content-Type': \"multipart/form-data; boundary=\".concat(data._boundary)\n        }\n      }).then(res => {\n        console.log(res.data); //this.setState({path:res.data[\"dir\"], audio_set: true});\n      });\n    };\n\n    xhr.open('GET', blobUrl);\n    console.log(\"send\");\n    xhr.send(); //console.log('recordedBlob is: ', recordedBlob);\n  }\n\n  render() {\n    return React.createElement(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 109\n      },\n      __self: this\n    }, React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 111\n      },\n      __self: this\n    }, React.createElement(ReactMic, {\n      record: this.state.record,\n      className: \"sound-wave\",\n      onStop: this.onStop,\n      onData: this.onData,\n      strokeColor: \"#000000\",\n      backgroundColor: \"#f50057\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 117\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 126\n      },\n      __self: this\n    }, React.createElement(Button, {\n      onClick: this.startRecording,\n      outlined: true,\n      disabled: this.state.record,\n      color: \"secondary\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 132\n      },\n      __self: this\n    }, \"Start\"), React.createElement(Button, {\n      onClick: this.stopRecording,\n      disabled: !this.state.record,\n      color: \"secondary\",\n      type: \"button\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 133\n      },\n      __self: this\n    }, \"Stop\")), React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 136\n      },\n      __self: this\n    }, this.state.display && React.createElement(Doughnut, {\n      data: this.state.data,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 144\n      },\n      __self: this\n    })), React.createElement(Grid, {\n      container: true,\n      direction: \"row\",\n      justify: \"center\",\n      alignItems: \"center\",\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 150\n      },\n      __self: this\n    }));\n  }\n\n}\nexport default Voice;","map":{"version":3,"sources":["/Users/xmly/PythonProjects/speech-emotion-recognition/emotion-voice/src/components/Voice.js"],"names":["ReactMic","React","ReactDOM","Button","Grid","Doughnut","axios","Voice","Component","constructor","props","startRecording","setState","record","display","stopRecording","state","data","labels","datasets","label","backgroundColor","borderWidth","postRequest","post","then","res","console","log","onData","recordedBlob","onStop","FormData","blob","Blob","type","blobUrl","URL","createObjectURL","xhr","XMLHttpRequest","responseType","onload","recoveredBlob","response","reader","FileReader","blobAsDataUrl","result","window","location","readAsDataURL","headers","_boundary","open","send","render"],"mappings":"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","sourcesContent":["import { ReactMic } from 'react-mic';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport Button from '@material-ui/core/Button';\nimport Grid from '@material-ui/core/Grid';\nimport { Doughnut } from 'react-chartjs-2';\nimport axios from 'axios';\n\n\nexport class Voice extends React.Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      record: false,\n      display:false,\n      data: {\n        labels: ['Angry', 'Sad', 'Passion', 'Fear', 'Neutral'],\n        datasets: [{\n            label: '# of Votes',\n            data: [12, 19, 3, 5, 2],\n            backgroundColor: [\n                'rgba(255, 99, 132, 1)',\n                'rgba(54, 162, 235, 1)',\n                'rgba(255, 206, 86, 1)',\n                'rgba(75, 192, 192, 1)',\n                'rgba(153, 102, 255, 1)'\n            ],\n            borderWidth: 0\n        }]\n        }\n    }\n\n  }\n\n  postRequest(){\n      axios.post('http://localhost:8000/analyse/', {\"name\":\"frank\"}).then(\n          res=>{\n              console.log(res.data)\n          }\n      )\n  }\n\n  startRecording = () => {\n    this.setState({\n      record: true,\n      display:false\n    });\n  }\n\n  stopRecording = () => {\n    this.setState({\n      record: false,\n      display:true\n    });\n  }\n\n  onData(recordedBlob) {\n    console.log('chunk of real-time data is: ', recordedBlob);\n  }\n\n  onStop(recordedBlob) {\n      const data = new FormData()\n\n      var blob = new Blob([\"Hello, world!\"], { type: 'text/plain' });\n      var blobUrl = URL.createObjectURL(blob);\n\n      console.log(blobUrl)\n\n      blobUrl = data['blobURL']\n      var xhr = new XMLHttpRequest;\n      xhr.responseType = 'blob';\n\n      xhr.onload = function() {\n           var recoveredBlob = xhr.response;\n\n           var reader = new FileReader;\n\n           reader.onload = function() {\n             var blobAsDataUrl = reader.result;\n             window.location = blobAsDataUrl;\n           };\n\n           reader.readAsDataURL(recoveredBlob);\n           console.log(reader)\n\n           axios.post('http://localhost:8000/record/', reader, {\n               headers: {\n                   'Content-Type': `multipart/form-data; boundary=${data._boundary}`,\n                 },}).then(\n               res=>{\n                   console.log(res.data)\n                   //this.setState({path:res.data[\"dir\"], audio_set: true});\n               }\n           )\n      };\n\n      xhr.open('GET', blobUrl);\n      console.log(\"send\")\n      xhr.send();\n\n\n    //console.log('recordedBlob is: ', recordedBlob);\n  }\n\n  render() {\n\n\n    return (\n      <div>\n\n      <Grid\n          container\n          direction=\"row\"\n          justify=\"center\"\n          alignItems=\"center\"\n        >\n        <ReactMic\n          record={this.state.record}\n          className=\"sound-wave\"\n          onStop={this.onStop}\n          onData={this.onData}\n          strokeColor=\"#000000\"\n          backgroundColor=\"#f50057\"\n           />\n         </Grid>\n         <Grid\n             container\n             direction=\"row\"\n             justify=\"center\"\n             alignItems=\"center\"\n           >\n                <Button onClick={this.startRecording} outlined disabled={this.state.record} color=\"secondary\">Start</Button>\n                <Button onClick={this.stopRecording} disabled={!this.state.record} color=\"secondary\" type=\"button\">Stop</Button>\n        </Grid>\n\n        <Grid\n            container\n            direction=\"row\"\n            justify=\"center\"\n            alignItems=\"center\"\n          >\n\n          {this.state.display&&\n               <Doughnut\n                 data={this.state.data}\n                 />\n           }\n       </Grid>\n\n       <Grid\n           container\n           direction=\"row\"\n           justify=\"center\"\n           alignItems=\"center\"\n       >\n       </Grid>\n      </div>\n    );\n  }\n}\n\nexport default Voice;\n"]},"metadata":{},"sourceType":"module"}